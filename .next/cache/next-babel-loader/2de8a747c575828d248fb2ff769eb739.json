{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/conorogrady/react_workspace/corona/components/CountryMap.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { ComposableMap, Geographies, Geography } from \"react-simple-maps\"; // url to a valid topojson file\n\nvar geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\nexport default function CountryMap(_ref) {\n  var setTooltipContent = _ref.setTooltipContent;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      stats = _useState2[0],\n      setStats = _useState2[1];\n\n  useEffect(function () {\n    fetch(\"https://covid19.mathdro.id/api/\").then(function (data) {\n      return data.json();\n    }).then(function (res) {\n      console.log(res);\n      setStats(res);\n    });\n  }, []); // empty array as second argument ensures useEffect function only runs once on initial render: https://css-tricks.com/run-useeffect-only-once/\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, __jsx(ComposableMap, {\n    \"data-tip\": \"\",\n    projectionConfig: {\n      scale: 75\n    },\n    width: 300,\n    height: 200,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, __jsx(Geographies, {\n    geography: geoUrl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, function (_ref2) {\n    var geographies = _ref2.geographies;\n    return geographies.map(function (geo) {\n      return __jsx(Geography, {\n        key: geo.rsmKey,\n        geography: geo,\n        onMouseEnter: function onMouseEnter() {\n          console.log(geo.properties);\n          setTooltipContent(\"\".concat(geo.properties.NAME, \"<br><br>Confirmed: <br>Recovered: <br>Deaths: \"));\n        },\n        onMouseLeave: function onMouseLeave() {\n          setTooltipContent(\"\");\n        },\n        style: {\n          \"default\": {\n            fill: \"#D6D6DA\",\n            outline: \"none\"\n          },\n          hover: {\n            fill: \"#F53\",\n            outline: \"none\"\n          },\n          pressed: {\n            fill: \"#E42\",\n            outline: \"none\"\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      });\n    });\n  })));\n}\n\nfunction getCountryStats(countryCode) {\n  var data, result;\n  return _regeneratorRuntime.async(function getCountryStats$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"https://covid19.mathdro.id/api/\"));\n\n        case 2:\n          data = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(data.json());\n\n        case 5:\n          result = _context.sent;\n          console.log(result);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/Users/conorogrady/react_workspace/corona/components/CountryMap.js"],"names":["React","ComposableMap","Geographies","Geography","geoUrl","CountryMap","setTooltipContent","useState","stats","setStats","useEffect","fetch","then","data","json","res","console","log","scale","geographies","map","geo","rsmKey","properties","NAME","fill","outline","hover","pressed","getCountryStats","countryCode","result"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,aADF,EAEEC,WAFF,EAGEC,SAHF,QAIO,mBAJP,C,CAMA;;AACA,IAAMC,MAAM,GAAG,wGAAf;AAEA,eAAe,SAASC,UAAT,OAA2C;AAAA,MAArBC,iBAAqB,QAArBA,iBAAqB;;AAAA,kBAC5BC,QAAQ,EADoB;AAAA;AAAA,MAC/CC,KAD+C;AAAA,MACxCC,QADwC;;AAGtDC,EAAAA,SAAS,CAAC,YAAM;AACZC,IAAAA,KAAK,mCAAL,CACCC,IADD,CACM,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,IAAL,EAAJ;AAAA,KADV,EAECF,IAFD,CAEM,UAAAG,GAAG,EAAI;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAN,MAAAA,QAAQ,CAACM,GAAD,CAAR;AACH,KALD;AAMH,GAPQ,EAON,EAPM,CAAT,CAHsD,CAWtD;;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,aAAD;AAAe,gBAAS,EAAxB;AAA2B,IAAA,gBAAgB,EAAE;AAAEG,MAAAA,KAAK,EAAE;AAAT,KAA7C;AAA4D,IAAA,KAAK,EAAE,GAAnE;AAAwE,IAAA,MAAM,EAAE,GAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,WAAD;AAAa,IAAA,SAAS,EAAEd,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA,QAAGe,WAAH,SAAGA,WAAH;AAAA,WAAqBA,WAAW,CAACC,GAAZ,CAAgB,UAAAC,GAAG;AAAA,aACrC,MAAC,SAAD;AACI,QAAA,GAAG,EAAEA,GAAG,CAACC,MADb;AAEI,QAAA,SAAS,EAAED,GAFf;AAGI,QAAA,YAAY,EAAE,wBAAM;AAChBL,UAAAA,OAAO,CAACC,GAAR,CAAYI,GAAG,CAACE,UAAhB;AAEAjB,UAAAA,iBAAiB,WAAIe,GAAG,CAACE,UAAJ,CAAeC,IAAnB,oDAAjB;AACH,SAPL;AAQI,QAAA,YAAY,EAAE,wBAAM;AAChBlB,UAAAA,iBAAiB,IAAjB;AACH,SAVL;AAWI,QAAA,KAAK,EAAE;AACH,qBAAS;AACTmB,YAAAA,IAAI,EAAE,SADG;AAETC,YAAAA,OAAO,EAAE;AAFA,WADN;AAKHC,UAAAA,KAAK,EAAE;AACPF,YAAAA,IAAI,EAAE,MADC;AAEPC,YAAAA,OAAO,EAAE;AAFF,WALJ;AASHE,UAAAA,OAAO,EAAE;AACTH,YAAAA,IAAI,EAAE,MADG;AAETC,YAAAA,OAAO,EAAE;AAFA;AATN,SAXX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADqC;AAAA,KAAnB,CAArB;AAAA,GADD,CADJ,CADA,CADJ;AAoCH;;AAED,SAAeG,eAAf,CAA+BC,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACuBnB,KAAK,mCAD5B;;AAAA;AACUE,UAAAA,IADV;AAAA;AAAA,2CAEyBA,IAAI,CAACC,IAAL,EAFzB;;AAAA;AAEUiB,UAAAA,MAFV;AAIIf,UAAAA,OAAO,CAACC,GAAR,CAAYc,MAAZ;;AAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import React from \"react\"\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n} from \"react-simple-maps\"\n\n// url to a valid topojson file\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\"\n\nexport default function CountryMap({ setTooltipContent }) {\n    const [stats, setStats] = useState();\n\n    useEffect(() => {\n        fetch(`https://covid19.mathdro.id/api/`)\n        .then(data => data.json())\n        .then(res => {    \n            console.log(res)\n            setStats(res)            \n        })        \n    }, [])\n    // empty array as second argument ensures useEffect function only runs once on initial render: https://css-tricks.com/run-useeffect-only-once/\n\n    return (\n        <div>\n        <ComposableMap data-tip=\"\" projectionConfig={{ scale: 75 }} width={300} height={200}>\n            <Geographies geography={geoUrl}>\n            {({ geographies }) => geographies.map(geo =>\n                <Geography \n                    key={geo.rsmKey} \n                    geography={geo} \n                    onMouseEnter={() => {\n                        console.log(geo.properties);\n\n                        setTooltipContent(`${geo.properties.NAME}<br><br>Confirmed: <br>Recovered: <br>Deaths: `);\n                    }}\n                    onMouseLeave={() => {\n                        setTooltipContent(``);\n                    }}\n                    style={{\n                        default: {\n                        fill: \"#D6D6DA\",\n                        outline: \"none\"\n                        },\n                        hover: {\n                        fill: \"#F53\",\n                        outline: \"none\"\n                        },\n                        pressed: {\n                        fill: \"#E42\",\n                        outline: \"none\"\n                        }\n                    }} \n                />\n            )}\n            </Geographies>\n        </ComposableMap>      \n        </div>\n    )\n}\n\nasync function getCountryStats(countryCode) {\n    const data = await fetch(`https://covid19.mathdro.id/api/`)\n    const result = await data.json()\n         \n    console.log(result)\n}"]},"metadata":{},"sourceType":"module"}