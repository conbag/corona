{"ast":null,"code":"var _jsxFileName = \"/Users/conorogrady/react_workspace/corona/components/CountryMap.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { ComposableMap, Geographies, Geography } from \"react-simple-maps\"; // url to a valid topojson file\n\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\nexport default function CountryMap({\n  setTooltipContent\n}) {\n  const [stats, setStats] = useState();\n  useEffect(() => {\n    fetch(`https://covid19.mathdro.id/api/`).then(data => data.json()).then(res => {\n      console.log(res);\n      setStats(res);\n    });\n  }, []); // empty array as second argument ensures useEffect function only runs once on initial render: https://css-tricks.com/run-useeffect-only-once/\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, __jsx(ComposableMap, {\n    \"data-tip\": \"\",\n    projectionConfig: {\n      scale: 75\n    },\n    width: 300,\n    height: 200,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, __jsx(Geographies, {\n    geography: geoUrl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, ({\n    geographies\n  }) => geographies.map(geo => __jsx(Geography, {\n    key: geo.rsmKey,\n    geography: geo,\n    onMouseEnter: () => {\n      console.log(geo.properties);\n      setTooltipContent(`${geo.properties.NAME}<br><br>Confirmed: <br>Recovered: <br>Deaths: `);\n    },\n    onMouseLeave: () => {\n      setTooltipContent(``);\n    },\n    style: {\n      default: {\n        fill: \"#D6D6DA\",\n        outline: \"none\"\n      },\n      hover: {\n        fill: \"#F53\",\n        outline: \"none\"\n      },\n      pressed: {\n        fill: \"#E42\",\n        outline: \"none\"\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  })))));\n}\n\nasync function getCountryStats(countryCode) {\n  const data = await fetch(`https://covid19.mathdro.id/api/`);\n  const result = await data.json();\n  console.log(result);\n}","map":{"version":3,"sources":["/Users/conorogrady/react_workspace/corona/components/CountryMap.js"],"names":["React","ComposableMap","Geographies","Geography","geoUrl","CountryMap","setTooltipContent","stats","setStats","useState","useEffect","fetch","then","data","json","res","console","log","scale","geographies","map","geo","rsmKey","properties","NAME","default","fill","outline","hover","pressed","getCountryStats","countryCode","result"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,aADF,EAEEC,WAFF,EAGEC,SAHF,QAIO,mBAJP,C,CAMA;;AACA,MAAMC,MAAM,GAAG,wGAAf;AAEA,eAAe,SAASC,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAA2C;AACtD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBC,QAAQ,EAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZC,IAAAA,KAAK,CAAE,iCAAF,CAAL,CACCC,IADD,CACMC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADd,EAECF,IAFD,CAEMG,GAAG,IAAI;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAP,MAAAA,QAAQ,CAACO,GAAD,CAAR;AACH,KALD;AAMH,GAPQ,EAON,EAPM,CAAT,CAHsD,CAWtD;;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,aAAD;AAAe,gBAAS,EAAxB;AAA2B,IAAA,gBAAgB,EAAE;AAAEG,MAAAA,KAAK,EAAE;AAAT,KAA7C;AAA4D,IAAA,KAAK,EAAE,GAAnE;AAAwE,IAAA,MAAM,EAAE,GAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,WAAD;AAAa,IAAA,SAAS,EAAEd,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,CAAC;AAAEe,IAAAA;AAAF,GAAD,KAAqBA,WAAW,CAACC,GAAZ,CAAgBC,GAAG,IACrC,MAAC,SAAD;AACI,IAAA,GAAG,EAAEA,GAAG,CAACC,MADb;AAEI,IAAA,SAAS,EAAED,GAFf;AAGI,IAAA,YAAY,EAAE,MAAM;AAChBL,MAAAA,OAAO,CAACC,GAAR,CAAYI,GAAG,CAACE,UAAhB;AAEAjB,MAAAA,iBAAiB,CAAE,GAAEe,GAAG,CAACE,UAAJ,CAAeC,IAAK,gDAAxB,CAAjB;AACH,KAPL;AAQI,IAAA,YAAY,EAAE,MAAM;AAChBlB,MAAAA,iBAAiB,CAAE,EAAF,CAAjB;AACH,KAVL;AAWI,IAAA,KAAK,EAAE;AACHmB,MAAAA,OAAO,EAAE;AACTC,QAAAA,IAAI,EAAE,SADG;AAETC,QAAAA,OAAO,EAAE;AAFA,OADN;AAKHC,MAAAA,KAAK,EAAE;AACPF,QAAAA,IAAI,EAAE,MADC;AAEPC,QAAAA,OAAO,EAAE;AAFF,OALJ;AASHE,MAAAA,OAAO,EAAE;AACTH,QAAAA,IAAI,EAAE,MADG;AAETC,QAAAA,OAAO,EAAE;AAFA;AATN,KAXX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADkB,CADtB,CADJ,CADA,CADJ;AAoCH;;AAED,eAAeG,eAAf,CAA+BC,WAA/B,EAA4C;AACxC,QAAMlB,IAAI,GAAG,MAAMF,KAAK,CAAE,iCAAF,CAAxB;AACA,QAAMqB,MAAM,GAAG,MAAMnB,IAAI,CAACC,IAAL,EAArB;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAYe,MAAZ;AACH","sourcesContent":["import React from \"react\"\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n} from \"react-simple-maps\"\n\n// url to a valid topojson file\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\"\n\nexport default function CountryMap({ setTooltipContent }) {\n    const [stats, setStats] = useState();\n\n    useEffect(() => {\n        fetch(`https://covid19.mathdro.id/api/`)\n        .then(data => data.json())\n        .then(res => {    \n            console.log(res)\n            setStats(res)            \n        })        \n    }, [])\n    // empty array as second argument ensures useEffect function only runs once on initial render: https://css-tricks.com/run-useeffect-only-once/\n\n    return (\n        <div>\n        <ComposableMap data-tip=\"\" projectionConfig={{ scale: 75 }} width={300} height={200}>\n            <Geographies geography={geoUrl}>\n            {({ geographies }) => geographies.map(geo =>\n                <Geography \n                    key={geo.rsmKey} \n                    geography={geo} \n                    onMouseEnter={() => {\n                        console.log(geo.properties);\n\n                        setTooltipContent(`${geo.properties.NAME}<br><br>Confirmed: <br>Recovered: <br>Deaths: `);\n                    }}\n                    onMouseLeave={() => {\n                        setTooltipContent(``);\n                    }}\n                    style={{\n                        default: {\n                        fill: \"#D6D6DA\",\n                        outline: \"none\"\n                        },\n                        hover: {\n                        fill: \"#F53\",\n                        outline: \"none\"\n                        },\n                        pressed: {\n                        fill: \"#E42\",\n                        outline: \"none\"\n                        }\n                    }} \n                />\n            )}\n            </Geographies>\n        </ComposableMap>      \n        </div>\n    )\n}\n\nasync function getCountryStats(countryCode) {\n    const data = await fetch(`https://covid19.mathdro.id/api/`)\n    const result = await data.json()\n         \n    console.log(result)\n}"]},"metadata":{},"sourceType":"module"}